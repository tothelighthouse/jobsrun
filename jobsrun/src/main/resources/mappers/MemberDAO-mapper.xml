<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.MemberDAO-mapper">

	<!-- 회원 등록 -->
	<insert id="joinMember" parameterType="MemberVO">
		INSERT INTO member( id,
		pw, tel, nickname, gender, birth, region, cdate, pic, fname, fsize,
		moneyrecommend)
		VALUES(#{id},#{pw},#{tel},#{nickname},#{gender},#{birth}, #{region},
		systimestamp,
		#{pic,jdbcType=BLOB},#{fname,jdbcType=VARCHAR},#{fsize,jdbcType=VARCHAR},
		#{moneyrecommend})
	</insert>

	<!-- 아이디 중복체크 -->
	<select id="idCheck" resultType="int">
		SELECT count(*)
		FROM member
		WHERE id = #{id}
	</select>

	<!-- 회원 로그인 -->
	<select id="loginMember" parameterType="MemberVO"
		resultType="MemberVO">
		select id, pw, tel, nickname, gender, birth, region, cdate,
		(select balance+(select sum(amount) from debitcredit where id=#{id}) FROM member where id=#{id}) AS balance, pic, fname,
		fsize, moneyrecommend,emailcheck
		,(select round(avg(rates),1) from rates where ratee=#{id}) as rates
		from member
		where id = #{id}
		and pw = #{pw}
	</select>

	<!-- 회원 전체 조회 -->
	<select id="selectAllMember" resultType="MemberVO">
		select id, pw, tel, nickname, gender, birth, region,cdate,
		 balance,(select round(avg(t2.rates),1)
			from rates t2
			where t1.id = t2.ratee) as rates
		from member t1
	</select>
	
	<!-- 회원 개별 조회 -->
	<select id="selectMember" parameterType="String"
		resultType="MemberVO"> <!-- 파라미터타입 생략가능 -->
		select id, pw, tel, nickname, gender, birth, region, cdate,
		(select balance+(select sum(amount) from debitcredit where id=#{id}) FROM member where id=#{id}) AS balance, pic, fname,
		fsize, moneyrecommend,emailcheck
		,(select round(avg(rates),1) from rates where ratee=#{id}) as rates
		from member
		where id = #{id}
	</select>
	
	<!-- 회원 수정 -->
	<update id="modifyMember" parameterType="MemberVO"> 
		update member
		set   tel = #{tel}, 
			  nickname = #{nickname}, 
			  gender= #{gender}, 
			  region = #{region}, 
			  birth = #{birth}, 
			  udate = systimestamp, 
			  pic = #{pic,jdbcType=BLOB}, 
			  fname = #{fname,jdbcType=VARCHAR}, 
			  fsize = #{fsize,jdbcType=VARCHAR},
			  moneyrecommend = #{moneyrecommend}
		where id = #{id}
		and   pw = #{pw}
	</update>
	
	<!-- 회원 탈퇴 -->
	<delete id = "outMember" parameterType="map">
		delete from member where id = #{id} and pw = #{pw} 
	</delete>
	
	<!-- 회원 아이디 찾기 -->
	<select id ="findID" parameterType="MemberVO" resultType="MemberVO">
		select id,cdate 
		from member 
		where tel= #{tel} and birth= #{birth} 
	</select>

	<!-- 회원 비밀번호 변경 -->
	<update id ="changePW" parameterType="String">
		update member
		set pw = #{pw}  
		where id = #{id}

	</update>
	
	<!-- 사진 삭제 -->
	<delete id = "fileDelete" parameterType="String"> 
		update member 
		set pic = null,
		    fsize = null,
		    fname = null
		where id = #{id}
	</delete>
	
	<!--  이메일 인증 -->
	<update id ="emailcheck" parameterType="String">
		update member
		set emailcheck = 1
		where id = #{id}
	</update>
	
	<!-- 회원 비밀번호 찾기 후 임시 비밀번호 생성 -->
	<update id ="updatepw" parameterType="map">
		update member
		set pw = #{pw}
		where id = #{id}
	</update>
	
	 <!--관리자 회원 삭제  -->
 	 <delete id="deleteMember" parameterType="String">
 	delete from member where id = #{id}
 	
 	</delete>
 	
 	<!-- 회원삭제(메세지) -->
 	<delete id="rdeleteMember" parameterType="String" >
 	
 	 delete from member where id=#{id}
 
 	</delete>
</mapper>
